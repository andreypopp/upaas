#!/bin/bash
export `cat /run/git/$(id -u)/upstart/sessions/*.session`
set -e
case "$1" in
  receive)
    APP="$2"; IMAGE="upaas/$APP"
    echo "-----> Building $APP ..."
    cat | upaas build $IMAGE
    echo "-----> Build complete!"
    echo "-----> Releasing $APP ..."
    upaas release $APP $IMAGE
    echo "-----> Release complete!"
    echo "-----> Deploying $APP ..."
    upaas deploy $APP $IMAGE
    echo "-----> Deploy complete!"
    echo "-----> Cleaning up ..."
    upaas cleanup
    echo "-----> Cleanup complete!"
    echo "=====> Application deployed:" `cat $HOME/$APP/ADDRESS`
    ;;

  build)
    IMAGE="$2"
    tmpdir=$(mktemp -d)
    $(cat > $tmpdir/app.tar)
    (cd $tmpdir; tar xf app.tar)
    stack=$(cat $tmpdir/.stack)
    id=$(cat $tmpdir/app.tar | docker run -i -a stdin upaas/stack/$stack /bin/bash -c "mkdir -p /app && tar -xC /app")
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    id=$(docker run -d $IMAGE /bin/bash -c \
      "cd /app && if [[ -f "Makefile.upaas" ]]; then make -f Makefile.upaas build; else make -f /build.mk build; fi")
    docker attach $id
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    rm -rf $tmpdir
    ;;

  release)
    APP="$2"; IMAGE="$3"
    if [[ -f "$HOME/$APP/ENV" ]]; then
      id=$(cat "$HOME/$APP/ENV" | docker run -i -a stdin $IMAGE /bin/bash -c "mkdir -p /app/.profile.d && cat > /app/.profile.d/app-env.sh")
      test $(docker wait $id) -eq 0
      docker commit $id $IMAGE > /dev/null
    fi
    ;;

  deploy)
    APP="$2"; IMAGE="$3"
    if [[ ! -f "$HOME/$APP/PORT" ]]; then
      upaas install-upstart-script $APP
      /sbin/initctl --user reload-configuration
      /sbin/initctl --user start $APP
    else
      /sbin/initctl --user restart $APP
    fi
    ;;

  install-upstart-script)
    APP="$2"
    mkdir -p $HOME/.init
    cat > $HOME/.init/$APP.conf <<EOF
description "Application $APP"

start on startup

respawn
respawn limit 10 5

pre-start script
  if docker ps | grep upaas/$APP; then
    stop; exit 0
  fi
end script

post-start script
  while true; do
    ID=\`docker ps | grep upaas/$APP | awk '{ print \$1 }'\`
    if [ -z "\$ID" ]; then sleep 1; else break; fi
  done
  if [ -f "$HOME/$APP/PORT" ]; then
    PORT=\`cat $HOME/$APP/PORT\`
  else
    PORT=\`docker port \$ID 5000\`
  fi
  echo \$ID > $HOME/$APP/CONTAINER
  echo \$PORT > $HOME/$APP/PORT
  echo "\`cat $HOME/HOSTNAME\`:\$PORT" > $HOME/$APP/ADDRESS
end script

post-stop script
  while true; do
    ID=\`docker ps | grep upaas/$APP | awk '{ print \$1 }'\`
    if [ ! -z "\$ID" ]; then sleep 1; else break; fi
  done
end script

script
  sleep 3
  IMAGE=\`docker images upaas/$APP | tail -n1 | awk '{ print \$3 }'\`
  if [ -f "$HOME/$APP/PORT" ]; then
    PORT=\`cat $HOME/$APP/PORT\`
    docker run -p ":\$PORT" -e "PORT=\$PORT" \$IMAGE /bin/bash -c "(cd /app && /usr/local/bin/shoreman)"
  else
    docker run -p 5000 -e PORT=5000 \$IMAGE /bin/bash -c "(cd /app && /usr/local/bin/shoreman)"
  fi
end script
EOF
  ;;

  cleanup)
    # delete all non-running container
    docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null &
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    ;;

  # temporary hack for https://github.com/progrium/upaas/issues/82
  deploy:all)
    for app in $(ls -d $HOME/*/); do
      APP=$(basename $app);
      IMAGE="app/$APP"
      upaas deploy $APP $IMAGE
    done
    ;;
esac
